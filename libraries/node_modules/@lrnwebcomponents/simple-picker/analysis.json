{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "`simple-picker`",
      "summary": "",
      "path": "simple-picker.js",
      "properties": [
        {
          "name": "_hasConnected",
          "type": "?",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../lit-element/lib/updating-element.js",
            "start": {
              "line": 472,
              "column": 4
            },
            "end": {
              "line": 474,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "_hasRequestedUpdate",
          "type": "?",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../lit-element/lib/updating-element.js",
            "start": {
              "line": 475,
              "column": 4
            },
            "end": {
              "line": 477,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "hasUpdated",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../lit-element/lib/updating-element.js",
            "start": {
              "line": 478,
              "column": 4
            },
            "end": {
              "line": 480,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "updateComplete",
          "type": "Promise",
          "description": "Returns a Promise that resolves when the element has completed updating.\nThe Promise value is a boolean that is `true` if the element completed the\nupdate without triggering another update. The Promise result is `false` if\na property was set inside `updated()`. If the Promise is rejected, an\nexception was thrown during the update.\n\nTo await additional asynchronous work, override the `_getUpdateComplete`\nmethod. For example, it is sometimes useful to await a rendered element\nbefore fulfilling this Promise. To do this, first await\n`super._getUpdateComplete()`, then any subsequent state.",
          "privacy": "public",
          "sourceRange": {
            "file": "../lit-element/lib/updating-element.js",
            "start": {
              "line": 547,
              "column": 4
            },
            "end": {
              "line": 549,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "allowNull",
          "type": "boolean | null | undefined",
          "description": "llow a null value?\nDefault behavior/false will select first option and set value accordingly.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 336,
              "column": 2
            },
            "end": {
              "line": 340,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "alignRight",
          "type": "boolean | null | undefined",
          "description": "Align right edges of listbox and button?\nDefault behavior/false aligns to left edges.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 346,
              "column": 2
            },
            "end": {
              "line": 350,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "ariaLabelledby",
          "type": "string | null | undefined",
          "description": "Optional. Sets aria-labelledby attribute",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 355,
              "column": 2
            },
            "end": {
              "line": 358,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "blockLabel",
          "type": "boolean | null | undefined",
          "description": "Position label above select dropdown?",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 363,
              "column": 2
            },
            "end": {
              "line": 367,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "disabled",
          "type": "boolean | null | undefined",
          "description": "Is picker disabled?",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 372,
              "column": 2
            },
            "end": {
              "line": 375,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "expanded",
          "type": "boolean | null | undefined",
          "description": "Is it expanded?",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 380,
              "column": 2
            },
            "end": {
              "line": 384,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "hideOptionLabels",
          "type": "boolean | null | undefined",
          "description": "Hide option labels? As color-picker or icon-picker, labels may be redundant.\nThis option would move labels off-screen so that only screen-readers will have them.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 390,
              "column": 2
            },
            "end": {
              "line": 394,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "hideSample",
          "type": "boolean | null | undefined",
          "description": "Hide selected item sample?\nDefault behavior/false shows a sample without expanding menu.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 400,
              "column": 2
            },
            "end": {
              "line": 404,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "label",
          "type": "string | null | undefined",
          "description": "Optional. Label for picker input",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 409,
              "column": 2
            },
            "end": {
              "line": 411,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "options",
          "type": "Array | null | undefined",
          "description": "An array of options for picker, eg.:\n[\n  [\n    {\n      \"icon\": \"editor:format-paint\",      //Optional. Used if picker is used as an icon picker.\n      \"alt\": \"Blue\",                      //Required for accessibility. Alt text description of choice.\n      \"style\": \"background-color: blue;\", //Optional. Used to set an option's style.\n      ...                                 //Optional. Any other properties that should be captured as part of selected option's value\n    },...\n  ]\n]",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 426,
              "column": 2
            },
            "end": {
              "line": 428,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "titleAsHtml",
          "type": "boolean | null | undefined",
          "description": "Renders html as title. (Good for titles with HTML in them.)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 433,
              "column": 2
            },
            "end": {
              "line": 436,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "value",
          "type": "string | null | undefined",
          "description": "An string that stores current value for picker",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 441,
              "column": 2
            },
            "end": {
              "line": 444,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "__activeDesc",
          "type": "string | null | undefined",
          "description": "Aria-activedescendant attribute (active option's ID)",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 449,
              "column": 2
            },
            "end": {
              "line": 451,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "__options",
          "type": "Array | null | undefined",
          "description": "An array of options for picker, eg.: `\n[\n  [\n    {\n      \"icon\": \"editor:format-paint\",      //Optional. Used if picker is used as an icon picker.\n      \"alt\": \"Blue\",                      //Required for accessibility. Alt text description of choice.\n      \"style\": \"background-color: blue;\", //Optional. Used to set an option's style.\n      ...                                 //Optional. Any other properties that should be captured as part of selected option's value\n    },...\n  ]\n]`",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 466,
              "column": 2
            },
            "end": {
              "line": 468,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "__selectedOption",
          "type": "Object | null | undefined",
          "description": "Selected option based on value of picker",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 473,
              "column": 2
            },
            "end": {
              "line": 475,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "initialize",
          "description": "Performs element initialization. By default this calls `createRenderRoot`\nto create the element `renderRoot` node and captures any pre-set values for\nregistered properties.",
          "privacy": "public",
          "sourceRange": {
            "file": "../lit-element/lit-element.js",
            "start": {
              "line": 93,
              "column": 4
            },
            "end": {
              "line": 103,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "_saveInstanceProperties",
          "description": "Fixes any properties set on the instance before upgrade time.\nOtherwise these would shadow the accessor and break these properties.\nThe properties are stored in a Map which is played back after the\nconstructor runs. Note, on very old versions of Safari (<=9) or Chrome\n(<=41), properties created for native platform properties like (`id` or\n`name`) may not have default values set in the element constructor. On\nthese browsers native properties appear on instances and therefore their\ndefault value will overwrite any element default (e.g. if the element sets\nthis.id = 'id' in the constructor, the 'id' will become '' since this is\nthe native platform default).",
          "privacy": "protected",
          "sourceRange": {
            "file": "../lit-element/lib/updating-element.js",
            "start": {
              "line": 281,
              "column": 4
            },
            "end": {
              "line": 295,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "_applyInstanceProperties",
          "description": "Applies previously saved instance properties.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../lit-element/lib/updating-element.js",
            "start": {
              "line": 299,
              "column": 4
            },
            "end": {
              "line": 305,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../lit-element/lit-element.js",
            "start": {
              "line": 146,
              "column": 4
            },
            "end": {
              "line": 153,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "disconnectedCallback",
          "description": "life cycle, element is removed from DOM",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 798,
              "column": 2
            },
            "end": {
              "line": 803,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "attributeChangedCallback",
          "description": "Synchronizes property values when attributes change.",
          "privacy": "public",
          "sourceRange": {
            "file": "../lit-element/lib/updating-element.js",
            "start": {
              "line": 327,
              "column": 4
            },
            "end": {
              "line": 331,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name"
            },
            {
              "name": "old"
            },
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "_propertyToAttribute",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../lit-element/lib/updating-element.js",
            "start": {
              "line": 332,
              "column": 4
            },
            "end": {
              "line": 359,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name"
            },
            {
              "name": "value"
            },
            {
              "name": "options",
              "defaultValue": "defaultPropertyDeclaration"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "_attributeToProperty",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../lit-element/lib/updating-element.js",
            "start": {
              "line": 360,
              "column": 4
            },
            "end": {
              "line": 378,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name"
            },
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "_requestUpdate",
          "description": "This private version of `requestUpdate` does not access or return the\n`updateComplete` promise. This promise can be overridden and is therefore\nnot free to access.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../lit-element/lib/updating-element.js",
            "start": {
              "line": 384,
              "column": 4
            },
            "end": {
              "line": 414,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name"
            },
            {
              "name": "oldValue"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "requestUpdate",
          "description": "Requests an update which is processed asynchronously. This should\nbe called when an element should update based on some state not triggered\nby setting a property. In this case, pass no arguments. It should also be\ncalled when manually implementing a property setter. In this case, pass the\nproperty `name` and `oldValue` to ensure that any configured property\noptions are honored. Returns the `updateComplete` Promise which is resolved\nwhen the update completes.",
          "privacy": "public",
          "sourceRange": {
            "file": "../lit-element/lib/updating-element.js",
            "start": {
              "line": 428,
              "column": 4
            },
            "end": {
              "line": 431,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name",
              "description": "{PropertyKey} (optional) name of requesting property"
            },
            {
              "name": "oldValue",
              "description": "{any} (optional) old value of requesting property"
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "A Promise that is resolved when the update completes."
          },
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "_enqueueUpdate",
          "description": "Sets up the element to asynchronously update.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../lit-element/lib/updating-element.js",
            "start": {
              "line": 435,
              "column": 4
            },
            "end": {
              "line": 471,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "performUpdate",
          "description": "Performs an element update. Note, if an exception is thrown during the\nupdate, `firstUpdated` and `updated` will not be called.\n\nYou can override this method to change the timing of updates. If this\nmethod is overridden, `super.performUpdate()` must be called.\n\nFor instance, to schedule updates to occur just before the next frame:\n\n```\nprotected async performUpdate(): Promise<unknown> {\n  await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n  super.performUpdate();\n}\n```",
          "privacy": "public",
          "sourceRange": {
            "file": "../lit-element/lib/updating-element.js",
            "start": {
              "line": 497,
              "column": 4
            },
            "end": {
              "line": 527,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "_markUpdated",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../lit-element/lib/updating-element.js",
            "start": {
              "line": 528,
              "column": 4
            },
            "end": {
              "line": 531,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "_getUpdateComplete",
          "description": "Override point for the `updateComplete` promise.\n\nIt is not safe to override the `updateComplete` getter directly due to a\nlimitation in TypeScript which means it is not possible to call a\nsuperclass getter (e.g. `super.updateComplete.then(...)`) when the target\nlanguage is ES5 (https://github.com/microsoft/TypeScript/issues/338).\nThis method should be overridden instead. For example:\n\n  class MyElement extends LitElement {\n    async _getUpdateComplete() {\n      await super._getUpdateComplete();\n      await this._myChild.updateComplete;\n    }\n  }",
          "privacy": "protected",
          "sourceRange": {
            "file": "../lit-element/lib/updating-element.js",
            "start": {
              "line": 566,
              "column": 4
            },
            "end": {
              "line": 568,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "shouldUpdate",
          "description": "Controls whether or not `update` should be called when the element requests\nan update. By default, this method always returns `true`, but this can be\ncustomized to control when to update.\n\n* @param _changedProperties Map of changed properties with old values",
          "privacy": "public",
          "sourceRange": {
            "file": "../lit-element/lib/updating-element.js",
            "start": {
              "line": 576,
              "column": 4
            },
            "end": {
              "line": 578,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "_changedProperties"
            }
          ],
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "update",
          "description": "Updates the element. This method reflects property values to attributes\nand calls `render` to render DOM via lit-html. Setting properties inside\nthis method will *not* trigger another update.\n* @param _changedProperties Map of changed properties with old values",
          "privacy": "public",
          "sourceRange": {
            "file": "../lit-element/lit-element.js",
            "start": {
              "line": 160,
              "column": 4
            },
            "end": {
              "line": 178,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "changedProperties"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "updated",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 539,
              "column": 2
            },
            "end": {
              "line": 553,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "changedProperties"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "firstUpdated",
          "description": "Invoked when the element is first updated. Implement to perform one time\nwork on the element after update.\n\nSetting properties inside this method will trigger the element to update\nagain after this update cycle completes.\n\n* @param _changedProperties Map of changed properties with old values",
          "privacy": "public",
          "sourceRange": {
            "file": "../lit-element/lib/updating-element.js",
            "start": {
              "line": 616,
              "column": 4
            },
            "end": {
              "line": 617,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "_changedProperties"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "createRenderRoot",
          "description": "Returns the node into which the element should render and by default\ncreates and returns an open shadowRoot. Implement to customize where the\nelement's DOM is rendered. For example, to render into the element's\nchildNodes, return `this`.",
          "privacy": "public",
          "sourceRange": {
            "file": "../lit-element/lit-element.js",
            "start": {
              "line": 111,
              "column": 4
            },
            "end": {
              "line": 113,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "(Element | DocumentFragment)",
            "desc": "Returns a node into which to render."
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "adoptStyles",
          "description": "Applies styling to the element shadowRoot using the `static get styles`\nproperty. Styling will apply using `shadowRoot.adoptedStyleSheets` where\navailable and will fallback otherwise. When Shadow DOM is polyfilled,\nShadyCSS scopes styles and adds them to the document. When Shadow DOM\nis available but `adoptedStyleSheets` is not, styles are appended to the\nend of the `shadowRoot` to [mimic spec\nbehavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).",
          "privacy": "public",
          "sourceRange": {
            "file": "../lit-element/lit-element.js",
            "start": {
              "line": 123,
              "column": 4
            },
            "end": {
              "line": 145,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "render",
          "description": "render function",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 269,
              "column": 2
            },
            "end": {
              "line": 324,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_getOption",
          "description": "returns value of selected option.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 562,
              "column": 2
            },
            "end": {
              "line": 568,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "options",
              "type": "array",
              "description": "array of options"
            },
            {
              "name": "optionId",
              "type": "string",
              "description": "selected option's id"
            }
          ],
          "return": {
            "type": "object",
            "desc": "selected option"
          }
        },
        {
          "name": "_goToOption",
          "description": "sets a new active descendant and sets focus on it",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 577,
              "column": 2
            },
            "end": {
              "line": 588,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "rownum",
              "type": "number",
              "description": "row number to be tested"
            },
            {
              "name": "colnum",
              "type": "number",
              "description": "column number to be tested"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleListboxClick",
          "description": "handles listbox click event",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 595,
              "column": 2
            },
            "end": {
              "line": 602,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "event",
              "description": "event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleListboxMousedown",
          "description": "handles listbox mousedown event",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 609,
              "column": 2
            },
            "end": {
              "line": 615,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "event",
              "description": "event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleListboxKeydown",
          "description": "handles listbox keyboard events",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 622,
              "column": 2
            },
            "end": {
              "line": 663,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "event",
              "description": "event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleOptionFocus",
          "description": "handles option focus event and sets active descendant",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 670,
              "column": 2
            },
            "end": {
              "line": 672,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "event",
              "description": "event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_setActiveOption",
          "description": "sets  active descendant to a given option's id",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 679,
              "column": 2
            },
            "end": {
              "line": 686,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "string",
              "description": "option id"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_valueChanged",
          "description": "handles change in value",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 695,
              "column": 2
            },
            "end": {
              "line": 706,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "newValue",
              "type": "object",
              "description": "new value for picker"
            },
            {
              "name": "oldValue",
              "type": "object",
              "description": "old value for picker"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_optionsChanged",
          "description": "handles change in options",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 714,
              "column": 2
            },
            "end": {
              "line": 716,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "newValue",
              "type": "object",
              "description": "new options for picker"
            },
            {
              "name": "oldValue",
              "type": "object",
              "description": "old options for picker"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_setSelectedOption",
          "description": "sets selected option to a given option's id",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 722,
              "column": 2
            },
            "end": {
              "line": 757,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "newVal"
            },
            {
              "name": "oldVal"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_toggleListbox",
          "description": "toggles listbox",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 765,
              "column": 2
            },
            "end": {
              "line": 784,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "open",
              "type": "boolean",
              "defaultValue": "!this.expanded",
              "description": "whether to open"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "setOptions",
          "description": "sets options for picker",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 791,
              "column": 2
            },
            "end": {
              "line": 794,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "options",
              "type": "array",
              "description": "nested array of options"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [
        {
          "name": "_ensureClassProperties",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../lit-element/lib/updating-element.js",
            "start": {
              "line": 124,
              "column": 4
            },
            "end": {
              "line": 134,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "createProperty",
          "description": "Creates a property accessor on the element prototype if one does not exist.\nThe property setter calls the property's `hasChanged` property option\nor uses a strict identity check to determine whether or not to request\nan update.",
          "privacy": "public",
          "sourceRange": {
            "file": "../lit-element/lib/updating-element.js",
            "start": {
              "line": 142,
              "column": 4
            },
            "end": {
              "line": 170,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name"
            },
            {
              "name": "options",
              "defaultValue": "defaultPropertyDeclaration"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "finalize",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../lit-element/lit-element.js",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 57,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "_attributeNameForProperty",
          "description": "Returns the property name for the given attribute `name`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../lit-element/lib/updating-element.js",
            "start": {
              "line": 212,
              "column": 4
            },
            "end": {
              "line": 219,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name"
            },
            {
              "name": "options"
            }
          ],
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "_valueHasChanged",
          "description": "Returns true if a property should request an update.\nCalled when a property value is set and uses the `hasChanged`\noption for the property if present or a strict identity check.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../lit-element/lib/updating-element.js",
            "start": {
              "line": 226,
              "column": 4
            },
            "end": {
              "line": 228,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "old"
            },
            {
              "name": "hasChanged",
              "defaultValue": "notEqual"
            }
          ],
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "_propertyValueFromAttribute",
          "description": "Returns the property value for the given attribute value.\nCalled via the `attributeChangedCallback` and uses the property's\n`converter` or `converter.fromAttribute` property option.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../lit-element/lib/updating-element.js",
            "start": {
              "line": 235,
              "column": 4
            },
            "end": {
              "line": 240,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "options"
            }
          ],
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "_propertyValueToAttribute",
          "description": "Returns the attribute value for the given property value. If this\nreturns undefined, the property will *not* be reflected to an attribute.\nIf this returns null, the attribute will be removed, otherwise the\nattribute will be set to the value.\nThis uses the property's `reflect` and `type.toAttribute` property options.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../lit-element/lib/updating-element.js",
            "start": {
              "line": 249,
              "column": 4
            },
            "end": {
              "line": 258,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "options"
            }
          ],
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "_getUniqueStyles",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../lit-element/lit-element.js",
            "start": {
              "line": 59,
              "column": 4
            },
            "end": {
              "line": 87,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "LitElement"
        }
      ],
      "demos": [
        {
          "url": "./demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 54,
          "column": 0
        },
        "end": {
          "line": 804,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "LitElement",
      "name": "SimplePicker",
      "attributes": [
        {
          "name": "allow-null",
          "description": "llow a null value?\nDefault behavior/false will select first option and set value accordingly.",
          "sourceRange": {
            "start": {
              "line": 336,
              "column": 2
            },
            "end": {
              "line": 340,
              "column": 3
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "align-right",
          "description": "Align right edges of listbox and button?\nDefault behavior/false aligns to left edges.",
          "sourceRange": {
            "start": {
              "line": 346,
              "column": 2
            },
            "end": {
              "line": 350,
              "column": 3
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "aria-labelledby",
          "description": "Optional. Sets aria-labelledby attribute",
          "sourceRange": {
            "start": {
              "line": 355,
              "column": 2
            },
            "end": {
              "line": 358,
              "column": 3
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "block-label",
          "description": "Position label above select dropdown?",
          "sourceRange": {
            "start": {
              "line": 363,
              "column": 2
            },
            "end": {
              "line": 367,
              "column": 3
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "disabled",
          "description": "Is picker disabled?",
          "sourceRange": {
            "start": {
              "line": 372,
              "column": 2
            },
            "end": {
              "line": 375,
              "column": 3
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "expanded",
          "description": "Is it expanded?",
          "sourceRange": {
            "start": {
              "line": 380,
              "column": 2
            },
            "end": {
              "line": 384,
              "column": 3
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "hide-option-labels",
          "description": "Hide option labels? As color-picker or icon-picker, labels may be redundant.\nThis option would move labels off-screen so that only screen-readers will have them.",
          "sourceRange": {
            "start": {
              "line": 390,
              "column": 2
            },
            "end": {
              "line": 394,
              "column": 3
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "hide-sample",
          "description": "Hide selected item sample?\nDefault behavior/false shows a sample without expanding menu.",
          "sourceRange": {
            "start": {
              "line": 400,
              "column": 2
            },
            "end": {
              "line": 404,
              "column": 3
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "label",
          "description": "Optional. Label for picker input",
          "sourceRange": {
            "start": {
              "line": 409,
              "column": 2
            },
            "end": {
              "line": 411,
              "column": 3
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "options",
          "description": "An array of options for picker, eg.:\n[\n  [\n    {\n      \"icon\": \"editor:format-paint\",      //Optional. Used if picker is used as an icon picker.\n      \"alt\": \"Blue\",                      //Required for accessibility. Alt text description of choice.\n      \"style\": \"background-color: blue;\", //Optional. Used to set an option's style.\n      ...                                 //Optional. Any other properties that should be captured as part of selected option's value\n    },...\n  ]\n]",
          "sourceRange": {
            "start": {
              "line": 426,
              "column": 2
            },
            "end": {
              "line": 428,
              "column": 3
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "title-as-html",
          "description": "Renders html as title. (Good for titles with HTML in them.)",
          "sourceRange": {
            "start": {
              "line": 433,
              "column": 2
            },
            "end": {
              "line": 436,
              "column": 3
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "value",
          "description": "An string that stores current value for picker",
          "sourceRange": {
            "start": {
              "line": 441,
              "column": 2
            },
            "end": {
              "line": 444,
              "column": 3
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "change",
          "description": "fires when options or value changes",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "changed",
          "description": "Fires when properties change",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "click",
          "description": "handles listbox click event",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "collapse",
          "description": "fires when listbox is collapsed",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "expand",
          "description": "fires when listbox is expanded",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "keydown",
          "description": "fires with listbox keyboard events",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "mousedown",
          "description": "fires with listbox mousedown event",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "option-focus",
          "description": "fires when active descendant changes",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "value-changed",
          "description": "fires when value changes",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "simple-picker\na simple picker for options, icons, etc.\n\n### Styling\n\n`<simple-picker>` provides the following custom properties and mixins\nfor styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--simple-picker-font-family` | Main font-family. | inherit\n`--simple-picker-font-size` | Main font-size. | inherit\n`--simple-picker-color` | Main text color. | black\n`--simple-picker-color-active` | Color of sample text when button is focused within or hovered. | --simple-picker-color\n`--simple-picker-color-disabled` | Disabled text color. | #888\n`--simple-picker-background-color` | Background color for button. | #f0f0f0\n`--simple-picker-background-color-disabled` | Background color for button when picker is disabled. | #e8e8e8\n`--simple-picker-border-radius` | Main border-radius. | 2px\n`--simple-picker-border-width` | Default border width. | 1px\n`--simple-picker-border-style` | Default border style. | solid\n`--simple-picker-border-color` | Default border color. | --simple-picker-color-disabled\n`--simple-picker-focus-border-width` | Border width when focused within or hovered. | --simple-picker-border-width\n`--simple-picker-focus-border-style` | Border style when focused within or hovered. | --simple-picker-border-style\n`--simple-picker-focus-border-color` | Border color when focused within or hovered. | --simple-picker-border-color\n`--simple-picker-label-color` | Label text color. | --simple-picker-color\n`--simple-picker-float-label-color` | Floating label text color. | --simple-picker-color-disabled\n`--simple-picker-float-label-active-color` | Floating label text color when picker is focused or hovered. | --simple-picker-color-disabled\n`--simple-picker-icon-transform` | Rotation of arrow icon by default. | rotate(0deg)\n`--simple-picker-expanded-icon-transform` | Rotation of arrow icon when picker is expanded. | rotate(0deg)\n`--simple-picker-sample-color` | Sample option text color. | --simple-picker-color\n`--simple-picker-sample-padding` | Sample option padding. | 2px\n`--simple-picker-sample-background-color` | Sample option background-color. | transparent\n`--simple-picker-option-size` | Height of option. | 24px\n`--simple-picker-option-selected-background-color` | Outline for currently sselected option. | --simple-picker-options-background-color\n`--simple-picker-option-active-background-color` | Outline for currently active option. | #aaddff\n`--simple-picker-option-padding` | padding within each simple picker option | 2px 10px\n`--simple-picker-option-label-padding` | adding within each simple picker option's label | --simple-picker-option-padding\n`--simple-picker-options-max-height` | Maximum amount of space listbox can use before scrolling. Use `unset` for now vertical scroll. | 250px\n`--simple-picker-options-border-width` | Border width of listbox. | --simple-picker-border-width\n`--simple-picker-options-border-style` | Border style of listbox. | --simple-picker-border-style\n`--simple-picker-options-border-color` | Border color of listbox. | --simple-picker-border-color\n`--simple-picker-options-background-color` | Background color for listbox. | #fff\n`--simple-picker-height` | Calculation based on option size, padding, and border. DO NOT EDIT. | --simple-picker-option-size - --simple-picker-sample-padding * 2 - --simple-picker-border-width * 2"
    },
    {
      "description": "`simple-picker-option`",
      "summary": "",
      "path": "lib/simple-picker-option.js",
      "properties": [
        {
          "name": "_hasConnected",
          "type": "?",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../lit-element/lib/updating-element.js",
            "start": {
              "line": 472,
              "column": 4
            },
            "end": {
              "line": 474,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "_hasRequestedUpdate",
          "type": "?",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../lit-element/lib/updating-element.js",
            "start": {
              "line": 475,
              "column": 4
            },
            "end": {
              "line": 477,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "hasUpdated",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../../lit-element/lib/updating-element.js",
            "start": {
              "line": 478,
              "column": 4
            },
            "end": {
              "line": 480,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "updateComplete",
          "type": "Promise",
          "description": "Returns a Promise that resolves when the element has completed updating.\nThe Promise value is a boolean that is `true` if the element completed the\nupdate without triggering another update. The Promise result is `false` if\na property was set inside `updated()`. If the Promise is rejected, an\nexception was thrown during the update.\n\nTo await additional asynchronous work, override the `_getUpdateComplete`\nmethod. For example, it is sometimes useful to await a rendered element\nbefore fulfilling this Promise. To do this, first await\n`super._getUpdateComplete()`, then any subsequent state.",
          "privacy": "public",
          "sourceRange": {
            "file": "../../lit-element/lib/updating-element.js",
            "start": {
              "line": 547,
              "column": 4
            },
            "end": {
              "line": 549,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "active",
          "type": "boolean | null | undefined",
          "description": "Is the option active?",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 113,
              "column": 6
            },
            "end": {
              "line": 116,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "data",
          "type": "Object | null | undefined",
          "description": "The style of the option. (Required for accessibility.)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 121,
              "column": 6
            },
            "end": {
              "line": 123,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "hidden",
          "type": "boolean | null | undefined",
          "description": "If the option is hidden",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 128,
              "column": 6
            },
            "end": {
              "line": 131,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "hideOptionLabels",
          "type": "boolean | null | undefined",
          "description": "Hide option labels? As color-picker or icon-picker, labels may be redundant.\nThis option would move the labels off-screen so that only screen-readers will have them.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 137,
              "column": 6
            },
            "end": {
              "line": 141,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "icon",
          "type": "string | null | undefined",
          "description": "Optional. If option is an iron icon, the iconset:name of the icon",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 146,
              "column": 6
            },
            "end": {
              "line": 148,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "id",
          "type": "string | null | undefined",
          "description": "The id of the option",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 153,
              "column": 6
            },
            "end": {
              "line": 156,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "label",
          "type": "string | null | undefined",
          "description": "The text of the option. (Required for accessibility.)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 161,
              "column": 6
            },
            "end": {
              "line": 164,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "selected",
          "type": "boolean | null | undefined",
          "description": "Is the option selected?",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 169,
              "column": 6
            },
            "end": {
              "line": 172,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "styles",
          "type": "Object | null | undefined",
          "description": "styles object to allow for piercing of shadow DOM",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 177,
              "column": 6
            },
            "end": {
              "line": 179,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "titleAsHtml",
          "type": "boolean | null | undefined",
          "description": "Renders html as title. (Good for titles with HTML in them.)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 184,
              "column": 6
            },
            "end": {
              "line": 188,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "value",
          "type": "string | null | undefined",
          "description": "The value of the option.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 193,
              "column": 6
            },
            "end": {
              "line": 196,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "initialize",
          "description": "Performs element initialization. By default this calls `createRenderRoot`\nto create the element `renderRoot` node and captures any pre-set values for\nregistered properties.",
          "privacy": "public",
          "sourceRange": {
            "file": "../../lit-element/lit-element.js",
            "start": {
              "line": 93,
              "column": 4
            },
            "end": {
              "line": 103,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "_saveInstanceProperties",
          "description": "Fixes any properties set on the instance before upgrade time.\nOtherwise these would shadow the accessor and break these properties.\nThe properties are stored in a Map which is played back after the\nconstructor runs. Note, on very old versions of Safari (<=9) or Chrome\n(<=41), properties created for native platform properties like (`id` or\n`name`) may not have default values set in the element constructor. On\nthese browsers native properties appear on instances and therefore their\ndefault value will overwrite any element default (e.g. if the element sets\nthis.id = 'id' in the constructor, the 'id' will become '' since this is\nthe native platform default).",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../lit-element/lib/updating-element.js",
            "start": {
              "line": 281,
              "column": 4
            },
            "end": {
              "line": 295,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "_applyInstanceProperties",
          "description": "Applies previously saved instance properties.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../lit-element/lib/updating-element.js",
            "start": {
              "line": 299,
              "column": 4
            },
            "end": {
              "line": 305,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../../lit-element/lit-element.js",
            "start": {
              "line": 146,
              "column": 4
            },
            "end": {
              "line": 153,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "disconnectedCallback",
          "description": "Allows for `super.disconnectedCallback()` in extensions while\nreserving the possibility of making non-breaking feature additions\nwhen disconnecting at some point in the future.",
          "privacy": "public",
          "sourceRange": {
            "file": "../../lit-element/lib/updating-element.js",
            "start": {
              "line": 322,
              "column": 4
            },
            "end": {
              "line": 323,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "attributeChangedCallback",
          "description": "Synchronizes property values when attributes change.",
          "privacy": "public",
          "sourceRange": {
            "file": "../../lit-element/lib/updating-element.js",
            "start": {
              "line": 327,
              "column": 4
            },
            "end": {
              "line": 331,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name"
            },
            {
              "name": "old"
            },
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "_propertyToAttribute",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../lit-element/lib/updating-element.js",
            "start": {
              "line": 332,
              "column": 4
            },
            "end": {
              "line": 359,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name"
            },
            {
              "name": "value"
            },
            {
              "name": "options",
              "defaultValue": "defaultPropertyDeclaration"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "_attributeToProperty",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../lit-element/lib/updating-element.js",
            "start": {
              "line": 360,
              "column": 4
            },
            "end": {
              "line": 378,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name"
            },
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "_requestUpdate",
          "description": "This private version of `requestUpdate` does not access or return the\n`updateComplete` promise. This promise can be overridden and is therefore\nnot free to access.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../lit-element/lib/updating-element.js",
            "start": {
              "line": 384,
              "column": 4
            },
            "end": {
              "line": 414,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name"
            },
            {
              "name": "oldValue"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "requestUpdate",
          "description": "Requests an update which is processed asynchronously. This should\nbe called when an element should update based on some state not triggered\nby setting a property. In this case, pass no arguments. It should also be\ncalled when manually implementing a property setter. In this case, pass the\nproperty `name` and `oldValue` to ensure that any configured property\noptions are honored. Returns the `updateComplete` Promise which is resolved\nwhen the update completes.",
          "privacy": "public",
          "sourceRange": {
            "file": "../../lit-element/lib/updating-element.js",
            "start": {
              "line": 428,
              "column": 4
            },
            "end": {
              "line": 431,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name",
              "description": "{PropertyKey} (optional) name of requesting property"
            },
            {
              "name": "oldValue",
              "description": "{any} (optional) old value of requesting property"
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "A Promise that is resolved when the update completes."
          },
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "_enqueueUpdate",
          "description": "Sets up the element to asynchronously update.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../lit-element/lib/updating-element.js",
            "start": {
              "line": 435,
              "column": 4
            },
            "end": {
              "line": 471,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "performUpdate",
          "description": "Performs an element update. Note, if an exception is thrown during the\nupdate, `firstUpdated` and `updated` will not be called.\n\nYou can override this method to change the timing of updates. If this\nmethod is overridden, `super.performUpdate()` must be called.\n\nFor instance, to schedule updates to occur just before the next frame:\n\n```\nprotected async performUpdate(): Promise<unknown> {\n  await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n  super.performUpdate();\n}\n```",
          "privacy": "public",
          "sourceRange": {
            "file": "../../lit-element/lib/updating-element.js",
            "start": {
              "line": 497,
              "column": 4
            },
            "end": {
              "line": 527,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "_markUpdated",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../lit-element/lib/updating-element.js",
            "start": {
              "line": 528,
              "column": 4
            },
            "end": {
              "line": 531,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "_getUpdateComplete",
          "description": "Override point for the `updateComplete` promise.\n\nIt is not safe to override the `updateComplete` getter directly due to a\nlimitation in TypeScript which means it is not possible to call a\nsuperclass getter (e.g. `super.updateComplete.then(...)`) when the target\nlanguage is ES5 (https://github.com/microsoft/TypeScript/issues/338).\nThis method should be overridden instead. For example:\n\n  class MyElement extends LitElement {\n    async _getUpdateComplete() {\n      await super._getUpdateComplete();\n      await this._myChild.updateComplete;\n    }\n  }",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../lit-element/lib/updating-element.js",
            "start": {
              "line": 566,
              "column": 4
            },
            "end": {
              "line": 568,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "shouldUpdate",
          "description": "Controls whether or not `update` should be called when the element requests\nan update. By default, this method always returns `true`, but this can be\ncustomized to control when to update.\n\n* @param _changedProperties Map of changed properties with old values",
          "privacy": "public",
          "sourceRange": {
            "file": "../../lit-element/lib/updating-element.js",
            "start": {
              "line": 576,
              "column": 4
            },
            "end": {
              "line": 578,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "_changedProperties"
            }
          ],
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "update",
          "description": "Updates the element. This method reflects property values to attributes\nand calls `render` to render DOM via lit-html. Setting properties inside\nthis method will *not* trigger another update.\n* @param _changedProperties Map of changed properties with old values",
          "privacy": "public",
          "sourceRange": {
            "file": "../../lit-element/lit-element.js",
            "start": {
              "line": 160,
              "column": 4
            },
            "end": {
              "line": 178,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "changedProperties"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "updated",
          "description": "Invoked whenever the element is updated. Implement to perform\npost-updating tasks via DOM APIs, for example, focusing an element.\n\nSetting properties inside this method will trigger the element to update\nagain after this update cycle completes.\n\n* @param _changedProperties Map of changed properties with old values",
          "privacy": "public",
          "sourceRange": {
            "file": "../../lit-element/lib/updating-element.js",
            "start": {
              "line": 605,
              "column": 4
            },
            "end": {
              "line": 606,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "_changedProperties"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "firstUpdated",
          "description": "Invoked when the element is first updated. Implement to perform one time\nwork on the element after update.\n\nSetting properties inside this method will trigger the element to update\nagain after this update cycle completes.\n\n* @param _changedProperties Map of changed properties with old values",
          "privacy": "public",
          "sourceRange": {
            "file": "../../lit-element/lib/updating-element.js",
            "start": {
              "line": 616,
              "column": 4
            },
            "end": {
              "line": 617,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "_changedProperties"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "createRenderRoot",
          "description": "Returns the node into which the element should render and by default\ncreates and returns an open shadowRoot. Implement to customize where the\nelement's DOM is rendered. For example, to render into the element's\nchildNodes, return `this`.",
          "privacy": "public",
          "sourceRange": {
            "file": "../../lit-element/lit-element.js",
            "start": {
              "line": 111,
              "column": 4
            },
            "end": {
              "line": 113,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "(Element | DocumentFragment)",
            "desc": "Returns a node into which to render."
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "adoptStyles",
          "description": "Applies styling to the element shadowRoot using the `static get styles`\nproperty. Styling will apply using `shadowRoot.adoptedStyleSheets` where\navailable and will fallback otherwise. When Shadow DOM is polyfilled,\nShadyCSS scopes styles and adds them to the document. When Shadow DOM\nis available but `adoptedStyleSheets` is not, styles are appended to the\nend of the `shadowRoot` to [mimic spec\nbehavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).",
          "privacy": "public",
          "sourceRange": {
            "file": "../../lit-element/lit-element.js",
            "start": {
              "line": 123,
              "column": 4
            },
            "end": {
              "line": 145,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "render",
          "description": "render function",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 72,
              "column": 2
            },
            "end": {
              "line": 87,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_handleFocus",
          "description": "On keyboard focus, fires an event to the picker so that active descendant can be set.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 211,
              "column": 2
            },
            "end": {
              "line": 213,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleHover",
          "description": "On mouse hover, fires an event to the picker so that active descendant can be set.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 219,
              "column": 2
            },
            "end": {
              "line": 221,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_getColor",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 223,
              "column": 2
            },
            "end": {
              "line": 225,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [
        {
          "name": "_ensureClassProperties",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../lit-element/lib/updating-element.js",
            "start": {
              "line": 124,
              "column": 4
            },
            "end": {
              "line": 134,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "createProperty",
          "description": "Creates a property accessor on the element prototype if one does not exist.\nThe property setter calls the property's `hasChanged` property option\nor uses a strict identity check to determine whether or not to request\nan update.",
          "privacy": "public",
          "sourceRange": {
            "file": "../../lit-element/lib/updating-element.js",
            "start": {
              "line": 142,
              "column": 4
            },
            "end": {
              "line": 170,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name"
            },
            {
              "name": "options",
              "defaultValue": "defaultPropertyDeclaration"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "finalize",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../../lit-element/lit-element.js",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 57,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "_attributeNameForProperty",
          "description": "Returns the property name for the given attribute `name`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../lit-element/lib/updating-element.js",
            "start": {
              "line": 212,
              "column": 4
            },
            "end": {
              "line": 219,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name"
            },
            {
              "name": "options"
            }
          ],
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "_valueHasChanged",
          "description": "Returns true if a property should request an update.\nCalled when a property value is set and uses the `hasChanged`\noption for the property if present or a strict identity check.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../lit-element/lib/updating-element.js",
            "start": {
              "line": 226,
              "column": 4
            },
            "end": {
              "line": 228,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "old"
            },
            {
              "name": "hasChanged",
              "defaultValue": "notEqual"
            }
          ],
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "_propertyValueFromAttribute",
          "description": "Returns the property value for the given attribute value.\nCalled via the `attributeChangedCallback` and uses the property's\n`converter` or `converter.fromAttribute` property option.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../lit-element/lib/updating-element.js",
            "start": {
              "line": 235,
              "column": 4
            },
            "end": {
              "line": 240,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "options"
            }
          ],
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "_propertyValueToAttribute",
          "description": "Returns the attribute value for the given property value. If this\nreturns undefined, the property will *not* be reflected to an attribute.\nIf this returns null, the attribute will be removed, otherwise the\nattribute will be set to the value.\nThis uses the property's `reflect` and `type.toAttribute` property options.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../lit-element/lib/updating-element.js",
            "start": {
              "line": 249,
              "column": 4
            },
            "end": {
              "line": 258,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "options"
            }
          ],
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "_getUniqueStyles",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../lit-element/lit-element.js",
            "start": {
              "line": 59,
              "column": 4
            },
            "end": {
              "line": 87,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "LitElement"
        }
      ],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 28,
          "column": 0
        },
        "end": {
          "line": 226,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "LitElement",
      "name": "SimplePickerOption",
      "attributes": [
        {
          "name": "active",
          "description": "Is the option active?",
          "sourceRange": {
            "start": {
              "line": 113,
              "column": 6
            },
            "end": {
              "line": 116,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "data",
          "description": "The style of the option. (Required for accessibility.)",
          "sourceRange": {
            "start": {
              "line": 121,
              "column": 6
            },
            "end": {
              "line": 123,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "hidden",
          "description": "If the option is hidden",
          "sourceRange": {
            "start": {
              "line": 128,
              "column": 6
            },
            "end": {
              "line": 131,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "hide-option-labels",
          "description": "Hide option labels? As color-picker or icon-picker, labels may be redundant.\nThis option would move the labels off-screen so that only screen-readers will have them.",
          "sourceRange": {
            "start": {
              "line": 137,
              "column": 6
            },
            "end": {
              "line": 141,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "icon",
          "description": "Optional. If option is an iron icon, the iconset:name of the icon",
          "sourceRange": {
            "start": {
              "line": 146,
              "column": 6
            },
            "end": {
              "line": 148,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "id",
          "description": "The id of the option",
          "sourceRange": {
            "start": {
              "line": 153,
              "column": 6
            },
            "end": {
              "line": 156,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "label",
          "description": "The text of the option. (Required for accessibility.)",
          "sourceRange": {
            "start": {
              "line": 161,
              "column": 6
            },
            "end": {
              "line": 164,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "selected",
          "description": "Is the option selected?",
          "sourceRange": {
            "start": {
              "line": 169,
              "column": 6
            },
            "end": {
              "line": 172,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "styles",
          "description": "styles object to allow for piercing of shadow DOM",
          "sourceRange": {
            "start": {
              "line": 177,
              "column": 6
            },
            "end": {
              "line": 179,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "title-as-html",
          "description": "Renders html as title. (Good for titles with HTML in them.)",
          "sourceRange": {
            "start": {
              "line": 184,
              "column": 6
            },
            "end": {
              "line": 188,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "value",
          "description": "The value of the option.",
          "sourceRange": {
            "start": {
              "line": 193,
              "column": 6
            },
            "end": {
              "line": 196,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "simple-picker-option\na simple picker for options, icons, etc.\n\n### Styling\n\n`<a11y-gif-player>` provides the following custom properties\nfor styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--simple-picker-color` | color of simple picker text | unset\n`--simple-picker-option-padding` | padding within each simple picker option | 2px 10px\n`--simple-picker-option-label-padding` | adding within each simple picker option's label | --simple-picker-option-padding\n`--simple-picker-option-size` | size of each simple picker option | 24px"
    }
  ]
}
